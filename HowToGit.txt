ssh確認
    ssh -T git@github-dc.com
        エラーが出た場合
        ディレクトリを移動するが戻ってくるのが面倒なのでターミナルをもう一つ作成してそちらで以下を実行
        cd
        cd .ssh
        ls
            configが存在する場合
            code config
                command not found: codeと言われた場合
                command+shift+Pを押す
                コマンドパレット上にshell commandと打つ
                「Shell Command: Install 'code' command in PATH command.」を選択
                codeコマンドでターミナルからファイルをVS Code上に開けるようになる
            configファイルを以下のように編集
                Host github-dc.com
                    HostName github.com
                    IdentityFile ~/.ssh/github-dc
                    User git
            ただし、3行目の~/.ssh/以下は.sshフォルダにあるsshキーが格納されたファイル名にする（塩見さんの研修ではgithub-dc）
        前のターミナルに戻り、再度実行
リモートをローカルにコピー（clone）
    Desktopなどに移動（ここに作業フォルダを作る）
    mkdir LapLab
    （このLapLabフォルダはgithubに上げないデータも格納する用）
    cd LapLab
    mkdir LapLab
    （このLapLabフォルダはgithubに上げるデータを格納する用）
    cd LapLab
    git clone -b ブランチ名 git@github-dc.com:Arai000/LapLab .（最後の.を忘れるとフォルダ階層が余計に深くなる）
初期設定
    git init
    git remote add origin git@github-dc.com:Arai000/LapLab
        remote origin already existと言われた場合
        git remote rm origin
        再度実行
ローカルをリモートに合わせる（pull）
    git pull origin ブランチ名
リモートをローカルに合わせる（push）
    git add .
    git commit -m “名前:ファイル内のどこを編集したのか変更内容を簡潔に”
    git push origin ブランチ名
        リモート側に先に（他人からの）変更があったなどの理由でエラーが出た場合（conflict）
        強制的にpushを行う場合：
            git push --force origin ブランチ名
        先にあった変更をローカルに反映させてからpushする場合：
            git fetchで変更箇所をリモートから取得
            取得された変更箇所をローカルに手作業で反映
            再度「git push origin ブランチ名」を実行
ブランチの移動（checkout）
    git checkout ブランチ名
ブランチの作成
    git branch ブランチ名
XXX（ブランチ名）をYYY（ブランチ名）に合わせる（merge）
    git checkout XXX
    git merge YYY
        mergeする理由の入力を求められた場合、iキーを押して入力状態にした後、理由を簡潔に入力
        （例：merge YYY's feature to XXX）
        その後、escキーを押して:wqと入力して保存
        mergeが完了したかgithubサイト上などで確認する
    （mergeはgithubサイト上でpull request承認後にもできる）
ブランチの削除
    ローカルのブランチの削除：git branch -d ブランチ名
    リモートのブランチの削除：git push origin --delete ブランチ名